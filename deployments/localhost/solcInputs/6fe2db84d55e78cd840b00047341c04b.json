{
  "language": "Solidity",
  "sources": {
    "contracts/ElectoralBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ncontract ElectoralBond {\r\n    mapping(string => address) private s_partyToWalletMap;\r\n    mapping(string => uint) private s_partyBalances;\r\n    mapping(address => string[]) private s_partyRemarks;\r\n\r\n    \r\n    event RemarkLeft(address indexed partyAddress, string partyName, string remark);\r\n\r\n    function transferBond(string memory partyName, uint amount) public payable {\r\n        address to = s_partyToWalletMap[partyName];\r\n        require(to != address(0), \"Party not registered\");\r\n        require(msg.value >= amount && amount > 0, \"Insufficient or zero Ether sent\");\r\n\r\n        s_partyBalances[partyName] += amount;\r\n        payable(to).transfer(amount);\r\n    }\r\n\r\n    function mapAddress(string memory partyName, address walletAddress) public {\r\n        s_partyToWalletMap[partyName] = walletAddress;\r\n    }\r\n\r\n    function changeWalletAddress(string memory partyName, address changedWalletAddress) public {\r\n        s_partyToWalletMap[partyName] = changedWalletAddress;\r\n    }\r\n\r\n    function getWalletAddress(string memory partyName) public view returns (address) {\r\n        return s_partyToWalletMap[partyName];\r\n    }\r\n\r\n    function getPartyBalance(string memory partyName) public view returns (uint) {\r\n        return s_partyBalances[partyName];\r\n    }\r\n\r\n   \r\n    function useFunds(string memory partyName, uint amount, string memory remark) public {\r\n        address partyAddress = s_partyToWalletMap[partyName];\r\n        require(msg.sender == partyAddress, \"Only the registered party can use these funds\");\r\n        require(s_partyBalances[partyName] >= amount, \"Insufficient balance\");\r\n\r\n        s_partyBalances[partyName] -= amount;\r\n        s_partyRemarks[partyAddress].push(remark);\r\n\r\n        \r\n        emit RemarkLeft(partyAddress, partyName, remark);\r\n    }\r\n\r\n    \r\n    function getRemarks(address partyAddress) public view returns (string[] memory) {\r\n        return s_partyRemarks[partyAddress];\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}